package mm19.game.ships;

import mm19.game.Ability;

/**
 * @author mm19
 *
 * An abstract base class for all ships in the game
 */
public abstract class Ship {
    private static int nextID = 0;

    final private int ID;
    final private int length;

    private boolean abilityUsed = false;
    private int health;

    /**
     * Constructor
     * Gives the instantiated Ship a unique identifier and specifies the length.
     *
     * @param length The length of the Ship.
     * @param health The health of the Ship.
     */
    public Ship(int length, int health) {
        ID = nextID;
        nextID++;

        this.length = length;
        this.health = health;
    }

    /**
     * Reports the length of the Ship
     *
     * @return Length of Ship
     */
    public int getLength() {
        return length;
    }

    /**
     * Reports the Ship's unique identifier
     *
     * @return A unique identifier for the Ship
     */
    public int getID() {
        return ID;
    }

    /**
     * Reports the health of the Ship
     *
     * @return Health of ship
     */
    public int getHealth() {
        return health;
    }

    /**
     * Applies damage to the Ship
     *
     * @param damage Amount of damage to deal to the ship
     * @return The Ship's remaining health
     */
    public int applyDamage(int damage) {
        if (damage > 0) {
            health -= damage;
        }
        return health;
    }

    /**
     * Reports whether or not the ship has sunk
     *
     * @return True if the ship is still afloat, false if destroyed.
     */
    public boolean isAlive() {
        return (health > 0);
    }

    /**
     * Gets the resource cost needed to move the ship
     *
     * @return Number of resources needed to move ship
     */
    public int getMoveCost() {
        return getLength() * Ability.MOVE_COST_PER_UNIT_LENGTH;
    }

    /**
     * Indicates whether the ship has used an ability in the current turn
     * @return True if the ship has used an ability, false otherwise
     */
    public boolean hasUsedAbility() {
        return abilityUsed;
    }

    /**
     * Sets state indicating the ship has used an ability
     */
    public void useAbility() {
        abilityUsed = true;
    }

    /**
     * Resets ship ability
     */
    public void resetAbility() {
        abilityUsed = false;
    }

    /**
     * Indicates whether or not the Ship can fire at positions on the board.
     *
     * @return True if the Ship can fire, false otherwise.
     */
    public abstract boolean canShoot();

    /**
     * Indicates whether or not the Ship can generate resources.
     *
     * @return True if the Ship can generate resources, false otherwise
     */
    public abstract boolean canGenerateResources();

    /**
     * Gets the number of resource points generated by the Ship each turn
     *
     * @return Amount of resources generated by ship
     */
    public abstract int getResources();

    /**
     * Indicates whether or not the Ship can move to a new location on the board.
     *
     * @return True if the Ship can move, false otherwise
     */
    public abstract boolean canMove();

    /**
     * Indicates whether or not the Ship can use the Burst Shot special ability
     *
     * @return True if the Ship can use burst shot, false otherwise.
     */
    public abstract boolean canBurstShot();

    /**
     * Indicates whether or not the Ship can use the Sonar ability
     *
     * @return True if the Ship can use sonar, false otherwise.
     */
    public abstract boolean canSonar();

    /**
     * Gets the identifier for the current ship
     *
     * @return The Ship's identifier
     */
    public abstract String getIdentifier();
}
